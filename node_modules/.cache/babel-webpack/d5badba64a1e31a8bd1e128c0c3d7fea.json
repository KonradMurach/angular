{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction AppComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const post_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n\", post_r1.title, \"\\n\");\n  }\n}\n\nexport class AppComponent {\n  constructor(httpService) {\n    this.httpService = httpService;\n    this.title = 'angular-http';\n    this.myPosts = []; //allPosts$: Observable<Array<Post>>;\n\n    this.allPosts$ = of([]);\n  }\n\n  getPosts() {\n    this.httpService.getPosts().subscribe(posts => {\n      this.myPosts = posts;\n      console.log(posts);\n    });\n    this.allPosts$ = this.httpService.getPosts();\n  }\n\n  getPost() {\n    if (this.getPostText == null) {\n      return;\n    }\n\n    this.httpService.getPost(this.getPostText).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  getPostsByUserId() {\n    if (this.getPostsByUserIdText == null) {\n      return;\n    }\n\n    this.httpService.getPostsByUserId(this.getPostsByUserIdText).subscribe(posts => {\n      this.myPosts = posts;\n      console.log(posts);\n    });\n  }\n\n  addPost() {\n    const myPost = this.getNewPost();\n    this.httpService.addPost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  updatePost() {\n    const myPost = this.getNewPost();\n    this.httpService.updatePost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  changePost() {\n    const myPost = {\n      id: 1,\n      body: 'Mój pierwszy post'\n    };\n    this.httpService.changePost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  deletePost() {\n    this.httpService.deletePost(1).subscribe(post => {\n      console.log(post);\n    });\n  }\n\n  getPostsWithError() {\n    this.httpService.getPostsWithError().subscribe(posts => {\n      console.log(posts);\n    }, error => {\n      console.log(error.status);\n    });\n  }\n\n  getNewPost() {\n    const post = {\n      userId: 1,\n      id: 1,\n      title: 'Mój post',\n      body: 'Mój pierwszy post'\n    };\n    return post;\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpService));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 28,\n  vars: 5,\n  consts: [[3, \"click\"], [3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_0_listener() {\n        return ctx.getPosts();\n      });\n      i0.ɵɵtext(1, \"getPosts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.getPostText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_4_listener() {\n        return ctx.getPost();\n      });\n      i0.ɵɵtext(5, \"getPost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"br\");\n      i0.ɵɵelementStart(7, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.getPostsByUserIdText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n        return ctx.getPostsByUserId();\n      });\n      i0.ɵɵtext(9, \"getPostsByUserId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_11_listener() {\n        return ctx.addPost();\n      });\n      i0.ɵɵtext(12, \"addPost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"br\");\n      i0.ɵɵelementStart(14, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_14_listener() {\n        return ctx.updatePost();\n      });\n      i0.ɵɵtext(15, \"updatePost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"br\");\n      i0.ɵɵelementStart(17, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_17_listener() {\n        return ctx.changePost();\n      });\n      i0.ɵɵtext(18, \"changePost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_20_listener() {\n        return ctx.deletePost();\n      });\n      i0.ɵɵtext(21, \"deletePost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementStart(23, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_23_listener() {\n        return ctx.getPostsWithError();\n      });\n      i0.ɵɵtext(24, \"getPostsWithError\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵtemplate(26, AppComponent_div_26_Template, 2, 1, \"div\", 2);\n      i0.ɵɵpipe(27, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.getPostText);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.getPostsByUserIdText);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(27, 3, ctx.allPosts$));\n    }\n  },\n  directives: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgForOf],\n  pipes: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"sources":["D:\\Projekty\\angular-http\\src\\app\\app.component.ts","D:\\Projekty\\angular-http\\src\\app\\app.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpService } from './http.service';\nimport { Post } from './modules/post';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n  title = 'angular-http';\n\n  constructor(private httpService: HttpService) { }\n\n\n  myPosts: Array<Post> = [];\n  getPostText?: number;\n  getPostsByUserIdText?: number;\n  //allPosts$: Observable<Array<Post>>;\n  allPosts$: Observable<Post[]> = of([]);\n\n  getPosts() {\n    this.httpService.getPosts().subscribe(posts => {\n      this.myPosts = posts;\n      console.log(posts);\n    });\n    this.allPosts$ = this.httpService.getPosts();\n  }\n\n  getPost() {\n    if (this.getPostText == null) {\n      return;\n    }\n    this.httpService.getPost(this.getPostText).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  getPostsByUserId() {\n    if (this.getPostsByUserIdText == null) {\n      return;\n    }\n    this.httpService.getPostsByUserId(this.getPostsByUserIdText).subscribe(posts => {\n      this.myPosts = posts;\n      console.log(posts);\n    });\n  }\n\n  addPost() {\n    const myPost = this.getNewPost();\n    this.httpService.addPost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  updatePost() {\n    const myPost = this.getNewPost();\n    this.httpService.updatePost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  changePost() {\n    const myPost: Post = ({\n      id: 1,\n      body: 'Mój pierwszy post'\n    });\n    this.httpService.changePost(myPost).subscribe(post => {\n      this.myPosts.push(post);\n      console.log(post);\n    });\n  }\n\n  deletePost() {\n    this.httpService.deletePost(1).subscribe(post => {\n      console.log(post);\n    });\n  }\n\n  getPostsWithError() {\n    this.httpService.getPostsWithError().subscribe(posts => {\n      console.log(posts);\n    },\n    (error: HttpErrorResponse) => {\n      console.log(error.status);\n    });\n  }\n\n  getNewPost(): Post {\n    const post: Post = ({\n      userId: 1,\n      id: 1,\n      title: 'Mój post',\n      body: 'Mój pierwszy post'\n    });\n    return post;\n  }\n}\n","<button (click)=\"getPosts()\">getPosts</button><br>\n<input [(ngModel)]=\"getPostText\"> <button (click)=\"getPost()\">getPost</button><br>\n<input [(ngModel)]=\"getPostsByUserIdText\"> <button (click)=\"getPostsByUserId()\">getPostsByUserId</button><br>\n<button (click)=\"addPost()\">addPost</button><br>\n<button (click)=\"updatePost()\">updatePost</button><br>\n<button (click)=\"changePost()\">changePost</button><br>\n<button (click)=\"deletePost()\">deletePost</button><br>\n<button (click)=\"getPostsWithError()\">getPostsWithError</button><br>\n\n<div *ngFor=\"let post of allPosts$ | async\">\n{{post.title}}\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}